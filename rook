#!/bin/bash

# Load platform and dependencies
load_dependencies() {

    if [ `uname -s` == "Darwin" ]; then
        OSX=true
    fi

    # Check if docker is installed
    command -v docker >/dev/null 2>&1 || {
        if [ "$OSX" == true ]; then
            echo >&2 "Rook uses Docker. The Docker OS X Client could not be found."
            echo >&2 "Please install the Docker client (http://docs.docker.io/en/latest/installation/mac/):"
            echo >&2 ""
            echo >&2 "curl -o docker https://get.docker.io/builds/Darwin/x86_64/docker-latest"
            echo >&2 "chmod +x docker"
            echo >&2 "sudo cp docker /usr/local/bin/"
            exit 1 
        else
            echo >&2 "Rook uses Docker. The Docker Client could not be found."
            echo >&2 "Please refer to the Docker installation instructions for your platform:"
            echo >&2 ""
            echo >&2 "https://www.docker.io/gettingstarted/#h_installation"
            exit 1 
        fi
    }

    # When using OS X, make sure the Vagrant VM is running before proceeding    
    if [ "$OSX" == true ]; then
        
        # Check if Vagrant is installed
        command -v vagrant >/dev/null 2>&1 || { 
            echo >&2 "Rook uses Vagrant on OS X."
            echo >&2 "Please refer to the installation instructions on the Vagrant website:"
            echo >&2 ""
            echo >&2 "http://www.vagrantup.com/downloads.html"
            exit 1
        }

        # Check if the Vagrantfile is available, fetch it if it isn't
        if [ ! -f ./rookdir/Vagrantfile ]; then
            wget --quiet -P "./rookdir" https://raw.github.com/rookcloud/rook/master/Vagrantfile
        fi

        # Start the Vagrant VM
        (cd rookdir && vagrant up) || { echo >&2 "Could not start the Vagrant VM. Exiting..."; exit 1; }
    fi

    # Set the name of the current directory as the application name. 
    # Filter out characters that are not allowed in container names: [^a-zA-Z0-9_-].
    # This is a fallback if the Application name is not defined in the Rookfile.
    # Preferably Rook creates the Application name definition in the Rookfile when it is first created.
    APPNAME=$(echo "'$(pwd)'" | xargs basename | sed 's/[^a-zA-Z0-9_-]//g')

    # TODO: PLATFORM and DEPENDENCIES should be loaded from Rookfile
    PLATFORM="ruby-1.9.3"
    DEPENDENCIES="mysql-5.5"
}

# Re-deploy all containers locally and connect them
development_deploy() {

    development_halt

    if [ "$OSX" == true ]; then
        osx_deploy
    else
        native_deploy
    fi
}

native_deploy() {

    # Check if Pipework is available, fetch it if it isn't ( https://github.com/jpetazzo/pipework )
    if [ ! -f ./rookdir/pipework ]; then
        wget --quiet -P "./rookdir" https://raw.github.com/jpetazzo/pipework/master/pipework
        chmod +x ./rookdir/pipework
    fi

    # TODO: start containers with the correct tags (versions)
    # TODO: Name the containers with an application-specific namespace.
    docker run --name $APPNAME-$PLATFORM -d -v $PWD/rookdir/$PLATFORM:/mount -v $PWD:/app rook/$PLATFORM init_wrapper $DEPENDENCIES

    for DEPENDENCY in $DEPENDENCIES
    do
        docker run --name $APPNAME-$DEPENDENCY -d -v $PWD/rookdir/$DEPENDENCY:/mount rook/$DEPENDENCY

        # Connect the application and the dependency through pipework
        # TODO: Support more than 1 dependency by using another technology to connect containers.
        sudo ./rookdir/pipework br1 $APPNAME-$DEPENDENCY 192.168.1.2/24
        sudo ./rookdir/pipework br1 $APPNAME-$PLATFORM 192.168.1.1/24
    done

    IP_ADDRESS=`docker inspect $APPNAME-$PLATFORM | grep 'IPAddress' | sed -e 's/\s*"IPAddress": "//' -e 's/",\s*//'`
    echo "Application started at: $IP_ADDRESS"
    
}

osx_deploy() {

    # If the /mount directory does not exist, create it and chown to the vagrant user
    deploy_command="sudo mkdir /mount 2> /dev/null && sudo chown vagrant:vagrant /mount; "

    # Copy the mountdir for the platform to /mount
    deploy_command="$deploy_command sudo cp -rp /vagrant/rookdir/$PLATFORM /mount/; "

    # Run the platform container
    deploy_command="$deploy_command docker run -name $PLATFORM -d -v /mount/$PLATFORM:/mount -v /vagrant:/app -p 80:80 rook/$PLATFORM init_wrapper $DEPENDENCIES; "
    for DEPENDENCY in $DEPENDENCIES
    do
        # Copy the mountdir for the dependency to /mount
        deploy_command="$deploy_command sudo cp -rp /vagrant/rookdir/$DEPENDENCY /mount/; "

        # Run the dependency container
        deploy_command="$deploy_command docker run -name $DEPENDENCY -d -v /mount/$DEPENDENCY:/mount rook/$DEPENDENCY; "
        
        # Connect the application and the dependency through pipework
        deploy_command="$deploy_command sudo /home/vagrant/pipework br1 $DEPENDENCY 192.168.1.2/24; "
        deploy_command="$deploy_command sudo /home/vagrant/pipework br1 $PLATFORM 192.168.1.1/24; "
    done

    (cd ./rookdir && vagrant ssh -c "$deploy_command")

    echo "Application started at: 127.0.0.1"
}

# Stop the currently deployed local containers
# TODO: Make this detect running containers instead of reading them from dependencies.
#       Users can change the dependencies while containers are running, causing containers not to be stopped.
development_halt() {

    halt_command="docker stop $APPNAME-$PLATFORM; docker rm $APPNAME-$PLATFORM; "
    for DEPENDENCY in $DEPENDENCIES
    do
        halt_command="$halt_command docker stop $APPNAME-$DEPENDENCY ; docker rm $APPNAME-$DEPENDENCY ; "
    done

    if [ "$OSX" == true ]; then
        (cd ./rookdir && vagrant ssh -c "$halt_command")
    else
        eval "$halt_command"
    fi

}

# This will ssh into the container with the name passed as a parameter
ssh_wrapper() {

    CONTAINER=$1
    if [ "$CONTAINER" == "" ]; then
        usage
        return
    fi

    if docker inspect $CONTAINER 2> /dev/null | grep --quiet 'IPAddress' ; then
        if docker inspect $CONTAINER | grep 'IPAddress' | grep -E --quiet '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' ; then
            IP_ADDRESS=`docker inspect $CONTAINER | grep 'IPAddress' | sed -e 's/\s*"IPAddress": "//' -e 's/",\s*//'`
            ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/insecure_key root@$IP_ADDRESS
        else
            echo "$CONTAINER is not running"
        fi
    else
        echo "$CONTAINER does not exist"
    fi
}

add() {

    DEPENDENCY=$1
    if [ "$DEPENDENCY" == "" ]; then
        usage
        return
    fi

    VERSION=$2
    case "$VERSION" in
        "edge")
            VERSION="master"
            ;;
        "")
            VERSION="release"
            ;;
    esac

    # TODO: Add the dependency to Rookfile
    # TODO: Different syntax for setting platform?
    
    if [ -d $PWD/rookdir/$DEPENDENCY ]; then
        echo "Warning - Dependency $DEPENDENCY is already installed in ./rookdir/$DEPENDENCY"
        echo -n "Do you wish to reset your data, configurations and logs for this dependency? [y/n] "
        read confirm
        if [[ $confirm != [Yy] ]]; then
            echo "Aborting..."
            return
        fi
    fi

    mkdir -p $PWD/rookdir/$DEPENDENCY

    # -q0- makes wget send the downloaded file to stdout for piping.
    # --strip-components 2 gets rid of the leading /$dependency/mount/ directories.
    wget -qO- https://github.com/rookcloud/$DEPENDENCY/archive/$VERSION.tar.gz \
      | tar -zx -C $PWD/rookdir/$DEPENDENCY --strip-components 2 $DEPENDENCY-$VERSION/mount 

    if [ $? -ne 0 ]; then
        echo "Error - Could not download $DEPENDENCY-$VERSION, aborting..."
        return
    fi
}

remove() {
    echo "remove"
    # TODO: Remove the dependency from Rookfile
}

usage() {
    echo "Rook, the application deployment tool."
    echo ""
    echo "Examples:"
    echo "    rook list available               # List all available dependencies"
    echo "    rook add mysql-5.5                # Add mysql-5.5 as a dependency"
    echo "    rook run                          # Deploy locally in development mode"
    echo "    rook ssh mysql-5.5                # Log in to the mys1ql-5.5 environment"
    echo ""
    echo "Usage:"
    echo "    rook list available               # List available dependencies"
    echo "    rook list installed               # List installed dependencies"
    echo "    rook add <dependency> [version]   # Install a dependency. Optionally pass a version"
    echo "    rook remove <depencency>          # Remove a dependency"
    echo ""
    echo "    rook run                          # Deploy locally in development mode"
    echo "    rook halt                         # Halt local development mode"
    echo "    rook ssh <dependency>             # Log in to the development environment"
    echo ""
    echo "    rook deploy <location>            # deploy remotely in production mode"
}


COMMAND=$1
shift
case $COMMAND in
    "add")
        add $@
        ;;
    "remove")
        remove $@
        ;;
    "run")
        load_dependencies
        development_deploy
        ;;
    "halt")
        load_dependencies
        development_halt
        ;;
    "ssh")
        load_dependencies
        ssh_wrapper $@
        ;;
    *)
        usage
        ;;
esac
