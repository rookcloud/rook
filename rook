#!/bin/bash

# Load platform and dependencies
load_dependencies() {

    # TODO: PLATFORM and DEPENDENCIES should be loaded from Rookfile
    PLATFORM="ruby-1.9.3"
    DEPENDENCIES="mysql-5.5"
}

# Re-deploy all containers locally and connect them
development_deploy() {

    load_dependencies

    if [ `uname -s` == "Darwin" ]; then
        OSX=true
    fi

    # Check if Pipework is available, fetch it if it isn't ( https://github.com/jpetazzo/pipework )
    if [ ! -f ./rookdir/pipework ]; then
        wget -P "./rookdir" https://raw.github.com/jpetazzo/pipework/master/pipework
        chmod +x  ./rookdir/pipework
    fi

    # TODO: When we are on OSX, we should check if the Vagrant VM is running and docker is configured 
    #       correctly to use the Docker daemon in the Vagrant VM

    # TODO: start containers with the correct tags (versions)
    docker stop $PLATFORM
    docker rm $PLATFORM
    APPLICATION_ID=$(docker run -name $PLATFORM -d -v $PWD/rookdir/$PLATFORM:/mount -v $PWD:/app rook/$PLATFORM init_wrapper $DEPENDENCIES)

    for DEPENDENCY in $DEPENDENCIES
    do
        docker stop $DEPENDENCY
        docker rm $DEPENDENCY
        DEPENDENCY_ID=$(docker run -name $DEPENDENCY -d -v $PWD/rookdir/$DEPENDENCY:/mount rook/$DEPENDENCY)

        if [ "$OSX" = true ]; then
            # The custom TCP port is where we expose Docker in the Vagrant environment for OSX
            vagrant ssh -c "sudo DOCKER_HOST=tcp://10.13.37.2:4243 /vagrant/rookdir/pipework br1 $DEPENDENCY_ID 192.168.1.2/24"
            vagrant ssh -c "sudo DOCKER_HOST=tcp://10.13.37.2:4243 /vagrant/rookdir/pipework br1 $APPLICATION_ID 192.168.1.1/24"
        else
            sudo ./rookdir/pipework br1 $DEPENDENCY_ID 192.168.1.2/24
            sudo ./rookdir/pipework br1 $APPLICATION_ID 192.168.1.1/24
        fi
    done

    # TODO: Print the IP address of the webapp container, possibly set hosts.
}

# Stop the currently deployed local containers
# TODO: Make this detect running containers instead of reading them from dependencies.
#       Users can change the dependencies while containers are running, causing containers not to be stopped.
development_halt() {

    load_dependencies

    docker stop $PLATFORM
    docker rm $PLATFORM
    for DEPENDENCY in $DEPENDENCIES
    do
        docker stop $DEPENDENCY
        docker rm $DEPENDENCY
    done
}

# This will ssh into the container with the name passed as a parameter
ssh_wrapper() {


    CONTAINER=$1
    if [ "$CONTAINER" == "" ]; then
        usage
        return
    fi

    if docker inspect $CONTAINER 2> /dev/null | grep --quiet 'IPAddress' ; then
        if docker inspect $CONTAINER | grep 'IPAddress' | grep -E --quiet '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' ; then
            IP_ADDRESS=`docker inspect $CONTAINER | grep 'IPAddress' | sed -e 's/\s*"IPAddress": "//' -e 's/",\s*//'`
            ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/insecure_key root@$IP_ADDRESS
        else
            echo "$CONTAINER is not running"
        fi
    else
        echo "$CONTAINER does not exist"
    fi
}

add() {

    DEPENDENCY=$1
    if [ "$DEPENDENCY" == "" ]; then
        usage
        return
    fi

    VERSION=$2
    case "$VERSION" in
        "edge")
            VERSION="master"
            ;;
        "")
            VERSION="release"
            ;;
    esac

    # TODO: Add the dependency to Rookfile
    # TODO: Different syntax for setting platform?
    
    if [ -d $PWD/rookdir/$DEPENDENCY ]; then
        echo "Warning - Dependency $DEPENDENCY is already installed in ./rookdir/$DEPENDENCY"
        echo -n "Do you wish to reset your data, configurations and logs for this dependency? [y/n] "
        read confirm
        if [[ $confirm != [Yy] ]]; then
            echo "Aborting..."
            return
        fi
    fi

    mkdir -p $PWD/rookdir/$DEPENDENCY

    # -q0- makes wget send the downloaded file to stdout for piping.
    # --strip-components 2 gets rid of the leading /$dependency/mount/ directories.
    wget -qO- https://github.com/rookcloud/$DEPENDENCY/archive/$VERSION.tar.gz \
      | tar -zx -C $PWD/rookdir/$DEPENDENCY --strip-components 2 $DEPENDENCY-$VERSION/mount 

    if [ $? -ne 0 ]; then
        echo "Error - Could not download $DEPENDENCY-$VERSION, aborting..."
        return
    fi
}

remove() {
    echo "remove"
    # TODO: Remove the dependency from Rookfile
}

usage() {
    echo "Rook, the application deployment tool."
    echo ""
    echo "Examples:"
    echo "    rook list available               # List all available dependencies"
    echo "    rook add mysql-5.5                # Add mysql-5.5 as a dependency"
    echo "    rook run                          # Deploy locally in development mode"
    echo "    rook ssh mysql-5.5                # Log in to the mys1ql-5.5 environment"
    echo ""
    echo "Usage:"
    echo "    rook list available               # List available dependencies"
    echo "    rook list installed               # List installed dependencies"
    echo "    rook add <dependency> [version]   # Install a dependency. Optionally pass a version"
    echo "    rook remove <depencency>          # Remove a dependency"
    echo ""
    echo "    rook run                          # Deploy locally in development mode"
    echo "    rook halt                         # Halt local development mode"
    echo "    rook ssh <dependency>             # Log in to the development environment"
    echo ""
    echo "    rook deploy <location>            # deploy remotely in production mode"
}


COMMAND=$1
shift
case $COMMAND in
    "add")
        add $@
        ;;
    "remove")
        remove
        ;;
    "run")
        development_deploy
        ;;
    "halt")
        development_halt
        ;;
    "ssh")
        ssh_wrapper $@
        ;;
    *)
        usage
        ;;
esac
